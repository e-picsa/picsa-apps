diff --git a/android/src/main/java/com/jeep/plugin/capacitor/capacitorvideoplayer/FullscreenExoPlayerFragment.java b/android/src/main/java/com/jeep/plugin/capacitor/capacitorvideoplayer/FullscreenExoPlayerFragment.java
index 108b80258f67cc289263b5850dd3dc9785866230..7df3abb5bf9f0d213fa4cf8607a861820e4d59cb 100644
--- a/android/src/main/java/com/jeep/plugin/capacitor/capacitorvideoplayer/FullscreenExoPlayerFragment.java
+++ b/android/src/main/java/com/jeep/plugin/capacitor/capacitorvideoplayer/FullscreenExoPlayerFragment.java
@@ -560,29 +560,30 @@ public class FullscreenExoPlayerFragment extends Fragment {
   }
 
   public void playerExit() {
-    Map<String, Object> info = new HashMap<String, Object>() {
+    if (player != null) {
+      Map<String, Object> info = new HashMap<String, Object>() {
       {
         put("dismiss", "1");
         put("currentTime", getCurrentTime());
       }
     };
-    if (player != null) {
       player.seekTo(0);
       player.setVolume(curVolume);
-    }
-    releasePlayer();
-/* 
-    Activity mAct = getActivity();
-    int mOrient = mAct.getRequestedOrientation();
-    if (mOrient == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
-      mAct.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-*/
-    // We control if the user lock the screen when the player is in pip mode
-    try {
-      NotificationCenter.defaultCenter().postNotification("playerFullscreenDismiss", info);
-    } catch (Exception e) {
-      Log.e(TAG, "Error in posting notification");
+   
+      releasePlayer();
+  /* 
+      Activity mAct = getActivity();
+      int mOrient = mAct.getRequestedOrientation();
+      if (mOrient == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
+        mAct.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+      }
+  */
+      // We control if the user lock the screen when the player is in pip mode
+      try {
+        NotificationCenter.defaultCenter().postNotification("playerFullscreenDismiss", info);
+      } catch (Exception e) {
+        Log.e(TAG, "Error in posting notification");
+      }
     }
   }
 
@@ -710,28 +711,46 @@ public class FullscreenExoPlayerFragment extends Fragment {
     }
   }
 
-  /**
-   * Release the player
-   */
   public void releasePlayer() {
     if (player != null) {
-      playWhenReady = player.getPlayWhenReady();
-      playbackPosition = player.getCurrentPosition();
-      currentWindow = player.getCurrentWindowIndex();
-      mediaSessionConnector.setPlayer(null);
-      mediaSession.setActive(false);
-      player.setRepeatMode(player.REPEAT_MODE_OFF);
-      player.removeListener(listener);
-      player.release();
-      player = null;
-      showSystemUI();
-      resetVariables();
-      if (chromecast) {
-        castPlayer.release();
-        castPlayer = null;
-      }
+        try {
+            playWhenReady = player.getPlayWhenReady();
+            playbackPosition = player.getCurrentPosition();
+            currentWindow = player.getCurrentWindowIndex();
+            
+            if (mediaSessionConnector != null) {
+                mediaSessionConnector.setPlayer(null);
+            }
+            
+            if (mediaSession != null) {
+                mediaSession.setActive(false);
+            }
+            
+            player.setRepeatMode(Player.REPEAT_MODE_OFF);
+            player.removeListener(listener);
+            player.release();
+        } catch (Exception e) {
+            Log.e("VideoPlayer", "Error releasing player", e);
+        } finally {
+            player = null;
+        }
+        
+        showSystemUI();
+        resetVariables();
     }
-  }
+    
+    // Move chromecast handling outside the player null check
+    // and add null check for castPlayer
+    if (chromecast && castPlayer != null) {
+        try {
+            castPlayer.release();
+        } catch (Exception e) {
+            Log.e("VideoPlayer", "Error releasing cast player", e);
+        } finally {
+            castPlayer = null;
+        }
+    }
+}
 
   /**
    * Perform onResume Action
@@ -1063,13 +1082,25 @@ public class FullscreenExoPlayerFragment extends Fragment {
    * Start the player
    */
   public void play() {
-    PlaybackParameters param = new PlaybackParameters(videoRate);
-    player.setPlaybackParameters(param);
+    // Add null check for player
+    if (player == null) {
+        Log.w("VideoPlayer", "Player is null, cannot play");
+        return;
+    }
+    
+    try {
+        PlaybackParameters param = new PlaybackParameters(videoRate);
+        player.setPlaybackParameters(param);
 
         /* If the user start the cast before the player is ready and playing, then the video will start
           in the device and chromecast at the same time. This is to avoid that behaviour.*/
-    if (!isCastSession) player.setPlayWhenReady(true);
-  }
+        if (!isCastSession) {
+            player.setPlayWhenReady(true);
+        }
+    } catch (Exception e) {
+        Log.e("VideoPlayer", "Error during play operation", e);
+    }
+}
 
   /**
    * Pause the player
@@ -1091,6 +1122,9 @@ public class FullscreenExoPlayerFragment extends Fragment {
    * @return int in seconds
    */
   public int getCurrentTime() {
+    if (player == null) {
+      return 0;
+    }
     return player.getCurrentPosition() == UNKNOWN_TIME ? 0 : (int) (player.getCurrentPosition() / 1000);
   }
 
diff --git a/package.json b/package.json
index ed15a76966c4485e37f3ac4d94708135a307080a..627f2cfab33ea6e095386b73f7b2d6529b70745b 100644
--- a/package.json
+++ b/package.json
@@ -82,5 +82,6 @@
     "android": {
       "src": "android"
     }
-  }
+  },
+  "packageManager": "yarn@1.22.19+sha1.4ba7fc5c6e704fce2066ecbfb0b0d8976fe62447"
 }
