-- -- Custom types
create type public.app_role as enum ('viewer','author', 'admin');
alter type public.app_role ADD VALUE 'resources.viewer';
alter type public.app_role ADD VALUE 'resources.author';
alter type public.app_role ADD VALUE 'resources.admin';
alter type public.app_role ADD VALUE 'deployments.viewer';
alter type public.app_role ADD VALUE 'deployments.author';
alter type public.app_role ADD VALUE 'deployments.admin';
alter type public.app_role ADD VALUE 'translations.viewer';
alter type public.app_role ADD VALUE 'translations.author';
alter type public.app_role ADD VALUE 'translations.admin';
-- -- Future roles can also be created via
-- -- alter type public.app_role ADD VALUE 'custom.value';

create table
  public.user_roles (
    created_at timestamp with time zone not null default now(),
    deployment_id text not null,
    user_id uuid not null default gen_random_uuid (),
    roles app_role[] not null default array[]::app_role[],
    constraint user_roles_pkey primary key (deployment_id, user_id),
    constraint public_user_roles_deployment_id_fkey foreign key (deployment_id) references deployments (id) on delete cascade,
    constraint public_user_roles_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
  ) tablespace pg_default;

comment on table public.user_roles is 'Application roles for each user';

grant all
  on table public.user_roles
to supabase_auth_admin;

revoke all
  on table public.user_roles
  from authenticated, anon;

create policy "Allow auth admin to read user roles" ON public.user_roles
as permissive for select
to supabase_auth_admin
using (true);

------------------------------------------------------------------------------------ 
-- Auth Hook - Assign user deployment roles to jwt token when user signs in 
-- https://supabase.com/docs/guides/auth/custom-claims-and-role-based-access-control-rbac?language=plpgsql

-- This hook can be configured to run locally from `config.toml` or on production
-- from the `auth/hooks` dashboard page
------------------------------------------------------------------------------------ 

create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
stable
as $$
  declare
    claims jsonb;
    roles_by_deployment jsonb = NULL;
  begin
    -- merge all rows to unique pairs of {[deployment_id]:[roles]}
    select jsonb_object_agg(deployment_id,roles) into roles_by_deployment
    from public.user_roles where user_id = (event->>'user_id')::uuid;
    RAISE NOTICE 'custom_access_token_hook (%)', roles_by_deployment::text;
    claims := event->'claims';
    -- Set picsa_roles claim property to extracted value (or empty jsonb if null)
    claims := jsonb_set(claims, '{picsa_roles}', coalesce(roles_by_deployment,'{}'::jsonb));
    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);
    -- Return the modified or original event
    return event;
  end;
$$;



grant usage on schema public to supabase_auth_admin;

grant execute
  on function public.custom_access_token_hook
  to supabase_auth_admin;

revoke execute
  on function public.custom_access_token_hook
  from authenticated, anon;




-- -- ROLE PERMISSIONS
-- -- NOTE - Hardcoded into app, could be used in future

-- -- create table public.role_permissions (
-- --   id           bigint generated by default as identity primary key,
-- --   role         app_role not null,
-- --   permission   app_permission not null,
-- --   unique (role, permission)
-- -- );