/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/status/": {
    /**
     * Get Status
     * @description Check server up
     */
    get: operations["get_status_v1_status__get"];
  };
  "/v1/annual_rainfall_summaries/": {
    /** Get Annual Rainfall Summaries */
    post: operations["get_annual_rainfall_summaries_v1_annual_rainfall_summaries__post"];
  };
  "/v1/annual_temperature_summaries/": {
    /** Get Annual Temperature Summaries */
    post: operations["get_annual_temperature_summaries_v1_annual_temperature_summaries__post"];
  };
  "/v1/crop_success_probabilities/": {
    /** Get Crop Success Probabilities */
    post: operations["get_crop_success_probabilities_v1_crop_success_probabilities__post"];
  };
  "/v1/monthly_temperature_summaries/": {
    /** Get Monthly Temperature Summaries */
    post: operations["get_monthly_temperature_summaries_v1_monthly_temperature_summaries__post"];
  };
  "/v1/season_start_probabilities/": {
    /** Get Season Start Probabilities */
    post: operations["get_season_start_probabilities_v1_season_start_probabilities__post"];
  };
  "/v1/extremes_summaries/": {
    /** Get Extremes Summaries */
    post: operations["get_extremes_summaries_v1_extremes_summaries__post"];
  };
  "/v1/station/{country}": {
    /** Read Stations */
    get: operations["read_stations_v1_station__country__get"];
  };
  "/v1/station/{country}/{station_id}": {
    /** Read Stations */
    get: operations["read_stations_v1_station__country___station_id__get"];
  };
  "/v1/documents/{country}": {
    /** Get Documents */
    get: operations["get_documents_v1_documents__country__get"];
  };
  "/v1/documents/{country}/{filepath}": {
    /**
     * Download Document
     * @description Download a specific document
     */
    get: operations["download_document_v1_documents__country___filepath__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AnnualRain */
    AnnualRain: {
      /** Annual Rain */
      annual_rain?: boolean;
      /** N Rain */
      n_rain?: boolean;
      /** Rain Day */
      rain_day?: number;
      /** Na Rm */
      na_rm?: boolean;
      /** Na N */
      na_n?: number;
      /** Na N Non */
      na_n_non?: number;
      /** Na Consec */
      na_consec?: number;
      /** Na Prop */
      na_prop?: number;
      /** S Start Doy */
      s_start_doy?: number;
    };
    /** AnnualRainfallSummariesMetadata */
    AnnualRainfallSummariesMetadata: {
      annual_rain?: components["schemas"]["AnnualRain"];
      start_rains?: components["schemas"]["StartRains"];
      end_rains?: components["schemas"]["EndRains"];
      end_season?: components["schemas"]["EndSeason"];
      seasonal_rain?: components["schemas"]["SeasonalRain"];
      seasonal_length?: components["schemas"]["SeasonalLength"];
    };
    /** AnnualRainfallSummariesParameters */
    AnnualRainfallSummariesParameters: {
      /**
       * Country
       * @default mw_test
       * @enum {string}
       */
      country?: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
      /**
       * Station Id
       * @default Kasungu
       */
      station_id?: string;
      /**
       * Summaries
       * @default [
       *   "annual_rain",
       *   "start_rains",
       *   "end_rains",
       *   "end_season",
       *   "seasonal_rain",
       *   "seasonal_length"
       * ]
       */
      summaries?: ("annual_rain" | "start_rains" | "end_rains" | "end_season" | "seasonal_rain" | "seasonal_length")[];
      /**
       * Override
       * @default false
       */
      override?: boolean;
    };
    /** AnnualRainfallSummariesResponce */
    AnnualRainfallSummariesResponce: {
      metadata: components["schemas"]["AnnualRainfallSummariesMetadata"];
      /** Data */
      data: components["schemas"]["AnnualRainfallSummariesdata"][];
    };
    /** AnnualRainfallSummariesdata */
    AnnualRainfallSummariesdata: {
      /** Station */
      station: string;
      /** Year */
      year: number;
      /** Annual Rain */
      annual_rain?: number;
      /** N Rain */
      n_rain?: number;
      /** Start Rains Doy */
      start_rains_doy?: number;
      /** Start Rains Date */
      start_rains_date?: unknown;
      /** Start Rains Status */
      start_rains_status?: boolean;
      /** End Rains Doy */
      end_rains_doy?: number;
      /** End Rains Date */
      end_rains_date?: unknown;
      /** End Rains Status */
      end_rains_status?: boolean;
      /** Seasonal Rain */
      seasonal_rain?: number;
      /** N Seasonal Rain */
      n_seasonal_rain?: number;
      /** Season Length */
      season_length?: number;
      /** End Season Doy */
      end_season_doy?: number;
      /** End Season Date */
      end_season_date?: unknown;
      /** End Season Status */
      end_season_status?: boolean;
    };
    /** AnnualTempartureSummariesdata */
    AnnualTempartureSummariesdata: {
      /** Station */
      station: string;
      /** Year */
      year: number;
      /** Mean Tmin */
      mean_tmin?: number;
      /** Mean Tmax */
      mean_tmax?: number;
      /** Min Tmin */
      min_tmin?: number;
      /** Min Tmax */
      min_tmax?: number;
      /** Max Tmin */
      max_tmin?: number;
      /** Max Tmax */
      max_tmax?: number;
    };
    /** AnnualTemperatureSummariesParameters */
    AnnualTemperatureSummariesParameters: {
      /**
       * Country
       * @default mw_test
       * @enum {string}
       */
      country?: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
      /**
       * Station Id
       * @default Kasungu
       */
      station_id?: string;
      /**
       * Summaries
       * @default [
       *   "mean_tmin",
       *   "mean_tmax",
       *   "min_tmin",
       *   "min_tmax",
       *   "max_tmin",
       *   "max_tmax"
       * ]
       */
      summaries?: ("mean_tmin" | "mean_tmax" | "min_tmin" | "min_tmax" | "max_tmin" | "max_tmax")[];
      /**
       * Override
       * @default false
       */
      override?: boolean;
    };
    /** AnnualTemperatureSummariesResponce */
    AnnualTemperatureSummariesResponce: {
      metadata: components["schemas"]["TemperatureSummariesMetadata"];
      /** Data */
      data: components["schemas"]["AnnualTempartureSummariesdata"][];
    };
    /** CropSuccessProbabilitiesMetadata */
    CropSuccessProbabilitiesMetadata: {
      start_rains?: components["schemas"]["StartRains"];
      end_rains?: components["schemas"]["EndRains"];
      crops_success?: components["schemas"]["CropsSuccess"];
    };
    /** CropSuccessProbabilitiesParameters */
    CropSuccessProbabilitiesParameters: {
      /**
       * Country
       * @default mw_test
       * @enum {string}
       */
      country?: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
      /**
       * Station Id
       * @default Kasungu
       */
      station_id?: string;
      /** Water Requirements */
      water_requirements?: number[];
      /** Planting Length */
      planting_length?: number[];
      /** Planting Dates */
      planting_dates?: number[];
      /** Start Before Season */
      start_before_season?: boolean;
      /**
       * Override
       * @default false
       */
      override?: boolean;
    };
    /** CropSuccessProbabilitiesResponce */
    CropSuccessProbabilitiesResponce: {
      metadata: components["schemas"]["CropSuccessProbabilitiesMetadata"];
      /** Data */
      data: components["schemas"]["CropSuccessProbabilitiesdata"][];
    };
    /** CropSuccessProbabilitiesdata */
    CropSuccessProbabilitiesdata: {
      /** Station */
      station: string;
      /** Rain Total */
      rain_total: number;
      /** Plant Day */
      plant_day: number;
      /** Plant Length */
      plant_length: number;
      /** Prop Success */
      prop_success: number;
    };
    /** CropsSuccess */
    CropsSuccess: {
      /** Water Requirements */
      water_requirements?: {
        [key: string]: number;
      };
      /** Planting Dates */
      planting_dates?: {
        [key: string]: number;
      };
      /** Planting Length */
      planting_length?: {
        [key: string]: number;
      };
      /** Start Check */
      start_check?: boolean;
    };
    /** DocumentMetadata */
    DocumentMetadata: {
      /** Name */
      name: string;
      /** Contenttype */
      contentType: string;
      /** Size */
      size: number;
      /** Timecreated */
      timeCreated: string;
      /** Updated */
      updated: string;
    };
    /** EndRains */
    EndRains: {
      /** Start Day */
      start_day?: number;
      /** End Day */
      end_day?: number;
      /** Output */
      output?: string;
      /** Min Rainfall */
      min_rainfall?: number;
      /** Interval Length */
      interval_length?: number;
      /** S Start Doy */
      s_start_doy?: number;
    };
    /** EndSeason */
    EndSeason: {
      /** Start Day */
      start_day?: number;
      /** End Day */
      end_day?: number;
      /** Water Balance Max */
      water_balance_max?: number;
      /** Capacity */
      capacity?: number;
      /** Evaporation */
      evaporation?: string;
      /** Evaporation Value */
      evaporation_value?: number;
      /** S Start Doy */
      s_start_doy?: number;
    };
    /** ExtremesSummariesParameters */
    ExtremesSummariesParameters: {
      /**
       * Country
       * @default mw_test
       * @enum {string}
       */
      country?: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
      /**
       * Station Id
       * @default Kasungu
       */
      station_id?: string;
      /**
       * Summaries
       * @default [
       *   "extremes_rain",
       *   "extremes_tmin",
       *   "extremes_tmax"
       * ]
       */
      summaries?: ("extremes_rain" | "extremes_tmin" | "extremes_tmax")[];
      /**
       * Override
       * @default false
       */
      override?: boolean;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** MonthlyTempartureSummariesdata */
    MonthlyTempartureSummariesdata: {
      /** Station */
      station: string;
      /** Year */
      year: number;
      /** Mean Tmin */
      mean_tmin?: number;
      /** Mean Tmax */
      mean_tmax?: number;
      /** Min Tmin */
      min_tmin?: number;
      /** Min Tmax */
      min_tmax?: number;
      /** Max Tmin */
      max_tmin?: number;
      /** Max Tmax */
      max_tmax?: number;
      /** Month */
      month: number;
    };
    /** MonthlyTemperatureSummariesParameters */
    MonthlyTemperatureSummariesParameters: {
      /**
       * Country
       * @default mw_test
       * @enum {string}
       */
      country?: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
      /**
       * Station Id
       * @default Kasungu
       */
      station_id?: string;
      /**
       * Summaries
       * @default [
       *   "mean_tmin",
       *   "mean_tmax",
       *   "min_tmin",
       *   "min_tmax",
       *   "max_tmin",
       *   "max_tmax"
       * ]
       */
      summaries?: ("mean_tmin" | "mean_tmax" | "min_tmin" | "min_tmax" | "max_tmin" | "max_tmax")[];
      /**
       * Override
       * @default false
       */
      override?: boolean;
    };
    /** MonthlyTemperatureSummariesResponce */
    MonthlyTemperatureSummariesResponce: {
      metadata: components["schemas"]["TemperatureSummariesMetadata"];
      /** Data */
      data: components["schemas"]["MonthlyTempartureSummariesdata"][];
    };
    /** SeasonStartProbabilities */
    SeasonStartProbabilities: {
      /** Specified Day */
      specified_day?: number[] | {
        [key: string]: number;
      };
    };
    /** SeasonStartProbabilitiesMetadata */
    SeasonStartProbabilitiesMetadata: {
      start_rains?: components["schemas"]["StartRains"];
      season_start_probabilities?: components["schemas"]["SeasonStartProbabilities"];
    };
    /** SeasonStartProbabilitiesParameters */
    SeasonStartProbabilitiesParameters: {
      /**
       * Country
       * @default mw_test
       * @enum {string}
       */
      country?: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
      /**
       * Station Id
       * @default Kasungu
       */
      station_id?: string;
      /**
       * Start Dates
       * @default [
       *   200,
       *   220,
       *   250,
       *   270,
       *   300,
       *   320
       * ]
       */
      start_dates?: number[];
      /**
       * Override
       * @default false
       */
      override?: boolean;
    };
    /** SeasonStartProbabilitiesResponce */
    SeasonStartProbabilitiesResponce: {
      metadata: components["schemas"]["SeasonStartProbabilitiesMetadata"];
      /** Data */
      data: components["schemas"]["SeasonStartProbabilitiesdata"][];
    };
    /** SeasonStartProbabilitiesdata */
    SeasonStartProbabilitiesdata: {
      /** Station */
      station: string;
      /** Day */
      day: number;
      /** Proportion */
      proportion: number;
    };
    /** SeasonalLength */
    SeasonalLength: {
      /** End Type */
      end_type?: string;
    };
    /** SeasonalRain */
    SeasonalRain: {
      /** Total Rain */
      total_rain?: number | boolean;
      /** N Rain */
      n_rain?: boolean;
      /** Rain Day */
      rain_day?: number;
      /** Na Rm */
      na_rm?: boolean;
      /** Na N */
      na_n?: number;
      /** Na N Non */
      na_n_non?: number;
      /** Na Consec */
      na_consec?: number;
      /** Na Prop */
      na_prop?: number;
    };
    /** SeasonalTotalRainfall */
    SeasonalTotalRainfall: {
      /** Na Prop */
      na_prop?: number;
    };
    /** StartRains */
    StartRains: {
      /** Start Day */
      start_day?: number;
      /** End Day */
      end_day?: number;
      /** Threshold */
      threshold?: number;
      /** Total Rainfall */
      total_rainfall?: boolean;
      /** Over Days */
      over_days?: number;
      /** Amount Rain */
      amount_rain?: number;
      /** Proportion */
      proportion?: boolean;
      /** Prob Rain Day */
      prob_rain_day?: number;
      /** Dry Spell */
      dry_spell?: boolean;
      /** Spell Max Dry Days */
      spell_max_dry_days?: number;
      /** Spell Interval */
      spell_interval?: number;
      /** Dry Period */
      dry_period?: boolean;
      /** Max Rain */
      max_rain?: number;
      /** Period Interval */
      period_interval?: number;
      /** Period Max Dry Days */
      period_max_dry_days?: number;
      /** S Start Doy */
      s_start_doy?: number;
      /** Number Rain Days */
      number_rain_days?: boolean;
      /** Min Rain Days */
      min_rain_days?: number;
      /** Rain Day Interval */
      rain_day_interval?: number;
    };
    /** StationAndDefintionResponce */
    StationAndDefintionResponce: {
      /** Station Id */
      station_id: string;
      /** Station Name */
      station_name: string;
      /** Latitude */
      latitude: number;
      /** Longitude */
      longitude: number;
      /** Elevation */
      elevation: number;
      /** District */
      district: string;
      /**
       * Country Code
       * @enum {string}
       */
      country_code: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
      /** Definitions Id */
      definitions_id: unknown[];
      /** Climsoft List */
      climsoft_list?: string[];
      data: components["schemas"]["StationDefinitionDataResponce"];
    };
    /** StationDataResponce */
    StationDataResponce: {
      /** Station Id */
      station_id: string;
      /** Station Name */
      station_name: string;
      /** Latitude */
      latitude: number;
      /** Longitude */
      longitude: number;
      /** Elevation */
      elevation: number;
      /** District */
      district: string;
      /**
       * Country Code
       * @enum {string}
       */
      country_code: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
    };
    /** StationDefinitionDataResponce */
    StationDefinitionDataResponce: {
      start_rains?: components["schemas"]["StartRains"];
      end_rains?: components["schemas"]["EndRains"];
      end_season?: components["schemas"]["EndSeason"];
      seasonal_length?: components["schemas"]["SeasonalLength"];
      annual_rain?: components["schemas"]["AnnualRain"];
      seasonal_rain?: components["schemas"]["SeasonalRain"];
      min_tmin?: components["schemas"]["Temp"];
      max_tmin?: components["schemas"]["Temp"];
      mean_tmin?: components["schemas"]["Temp"];
      min_tmax?: components["schemas"]["Temp"];
      max_tmax?: components["schemas"]["Temp"];
      mean_tmax?: components["schemas"]["Temp"];
      crops_success?: components["schemas"]["CropsSuccess"];
      season_start_probabilities?: components["schemas"]["SeasonStartProbabilities"];
      seasonal_total_rainfall?: components["schemas"]["SeasonalTotalRainfall"];
    };
    /** StationListResponce */
    StationListResponce: {
      /** Data */
      data: components["schemas"]["StationDataResponce"][];
    };
    /** Temp */
    Temp: {
      /** To */
      to?: string | string[];
      /** Na Rm */
      na_rm?: boolean;
      /** Na N */
      na_n?: number;
      /** Na N Non */
      na_n_non?: number;
      /** Na Consec */
      na_consec?: number;
      /** Na Prop */
      na_prop?: number;
      /** S Start Doy */
      s_start_doy?: number;
    };
    /** TemperatureSummariesMetadata */
    TemperatureSummariesMetadata: {
      mean_tmin?: components["schemas"]["Temp"];
      mean_tmax?: components["schemas"]["Temp"];
      min_tmin?: components["schemas"]["Temp"];
      min_tmax?: components["schemas"]["Temp"];
      max_tmin?: components["schemas"]["Temp"];
      max_tmax?: components["schemas"]["Temp"];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Status
   * @description Check server up
   */
  get_status_v1_status__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get Annual Rainfall Summaries */
  get_annual_rainfall_summaries_v1_annual_rainfall_summaries__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AnnualRainfallSummariesParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AnnualRainfallSummariesResponce"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Annual Temperature Summaries */
  get_annual_temperature_summaries_v1_annual_temperature_summaries__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AnnualTemperatureSummariesParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AnnualTemperatureSummariesResponce"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Crop Success Probabilities */
  get_crop_success_probabilities_v1_crop_success_probabilities__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CropSuccessProbabilitiesParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CropSuccessProbabilitiesResponce"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Monthly Temperature Summaries */
  get_monthly_temperature_summaries_v1_monthly_temperature_summaries__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonthlyTemperatureSummariesParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MonthlyTemperatureSummariesResponce"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Season Start Probabilities */
  get_season_start_probabilities_v1_season_start_probabilities__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeasonStartProbabilitiesParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SeasonStartProbabilitiesResponce"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Extremes Summaries */
  get_extremes_summaries_v1_extremes_summaries__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExtremesSummariesParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Read Stations */
  read_stations_v1_station__country__get: {
    parameters: {
      path: {
        country: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StationListResponce"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Read Stations */
  read_stations_v1_station__country___station_id__get: {
    parameters: {
      path: {
        country: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
        station_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StationAndDefintionResponce"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Documents */
  get_documents_v1_documents__country__get: {
    parameters: {
      query?: {
        /** @description Specify folder path prefixes. Can be used to filter folders timestamped YYYYMMDD, E.g. "202405" */
        prefix?: string;
        /** @description Maximum number of results to return. If more than 1000 results required use multiple queries */
        max_results?: number;
        /** @description Use expression for advanced pattern matching. To return only files and not folders end with "[^/]" */
        match_glob?: string;
      };
      path: {
        country: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentMetadata"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Download Document
   * @description Download a specific document
   */
  download_document_v1_documents__country___filepath__get: {
    parameters: {
      path: {
        country: "zm" | "mw" | "zm_test" | "mw_test" | "zm_workshops" | "mw_workshops";
        filepath: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentMetadata"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
